node {
  checkout scm
  def docker_registry = env.DOCKER_REGISTRY ?: 'registry.tarokosoftware.io'
  def docker_img = ''
  def build_version = ''
  def product_name = 'demo'
  //def product_name = env.JOB_NAME ?: 'demo'
  def build_env = 'develop'
  def rails_env = 'development'

  try {
      stage('Prepare') {
        // variables
        try {
          build_version = sh(returnStdout: true, script: 'git describe --tags').trim()
        } catch(exc) {}

        switch (env.BRANCH_NAME) {
        case ~/^release\/.*/:
          build_env = 'staging'
          rails_env = 'staging'
        case 'master':
          build_env = 'production'
          rails_env = 'production'
          break
        case 'develop':
          break
        default:
          error "Not support build docker image with branch name: ${env.BRANCH_NAME}"
        }

        // configuration
        dir('kubernetes') {
          git url: 'git@github.com:resumecompanion/ansible_kubernetes.git',
              branch: 'master',
              credentialsId: 'github2'
          ansiColor('xterm') {
            sh 'ansible-playbook -i inventories/localhost playbooks/build_prepare.yml -e 'APP_TYPE=rails' -e 'APP_ENV=${rails_env}' -e 'PRODUCT_NAME=${product_name}'
          }
        }
      }

      stage('Build') {
        docker_img = docker.build(
          "${build_env}/${product_name}",
          "-f kubernetes/Dockerfile --build-arg RAILS_ENV=${rails_env} ."
        )

        if (!docker_img) {
          error "fail to build docker image"
        }
      }

      stage('Push') {
        docker.withRegistry(docker_registry, 'registry') {
          if (build_version) {
            docker_img.push(build_version)
          } else {
            docker_img.push()
          }
        }
      }
  } finally {
    // slack notification
  }
}
